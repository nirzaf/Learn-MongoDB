// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  progress UserProgress[]

  @@map("users")
}

model Module {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  tier        Int      // 1-4 for different difficulty levels
  order       Int      // Order within tier
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  content     String   // Markdown content
  order       Int      // Order within module
  moduleId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module     Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress   UserProgress[]
  challenges Challenge[]

  @@map("lessons")
}

model Challenge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  query       String   // Expected MongoDB query
  solution    String   // Solution explanation
  difficulty  String   // "easy", "medium", "hard"
  lessonId    String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("challenges")
}

model UserProgress {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  lessonId    String    @db.ObjectId
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_progress")
}
